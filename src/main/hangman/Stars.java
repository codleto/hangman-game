package main.hangman;

/*
+ –°–æ–∑–¥–∞—Ç—å –º–µ—Ç–æ–¥ –≤—ã–∑–æ–≤–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é

- –ü—É—Å—Ç–æ–π –≤–≤–æ–¥ –ª–æ–º–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å
- –ë—É–∫–≤–∞ "—ë" –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—É, —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ–±—ã –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –∏ –ø—Ä–æ–ø–∏—Å–Ω—ã–µ
- –µ—Å–ª–∏ –≤–≤–æ–¥–∏—à—å —Ü–∏—Ñ—Ä—ã —Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—å —á—Ç–æ –Ω–µ–ª—å–∑—è –≤–≤–æ–¥–∏—Ç—å —Ü–∏—Ñ—Ä—ã –∏–ª–∏ —Ç–∏–ø–∞ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä—ã
- —Å–¥–µ–ª–∞—Ç—å —Ñ–∞–π–ª —Å–ª–æ–≤–∞—Ä—è
- –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –±—É–∫–≤–∞ –Ω–µ–¥–æ–ª–∂–Ω–∞ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫
- —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ–±—ã –ø–∏—Å–∞–ª–æ –≤ –∫–æ–Ω—Å–æ–ª–∏ —á—Ç–æ —ç—Ç—É –±—É–∫–≤–∞ —É–∂–µ —É–≥–∞–¥–∞–Ω–∞
- —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ–±—ã –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ( —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫—É–¥–∞ –∏–¥–µ—Ç –∑–∞–ø–∏—Å—å) –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–ª–∞—Å—å –∏ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
- –≤–æ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–≤–ª–µ–Ω–∏—è—Ö –≥–¥–µ –µ—Å—Ç—å —Å–∫–∞–Ω–Ω–µ—Ä –Ω—É–∂–Ω–æ —É—Å–ª–æ–≤–Ω–æ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞—â–∏—Ç—É –æ—Ç –æ—à–∏–±–æ–∫ –≤–≤–æ–¥–∞
- —É–±—Ä–∞—Ç—å –∫–æ–º–µ–Ω—Ç—ã
- –ª—É—á—à–µ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å while –≤–º–µ—Å—Ç–æ do –≤ –Ω–∞—à–∏—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –Ω—É–∂–µ–Ω –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –≤—ã—Ö–æ–¥ –∏–∑ –Ω–µ–≥–æ –±—Ä–µ–π–∫,
 –µ—Å–ª–∏ –≤–æ—à–ª–∏ –≤ –∫–∞–∫–æ–π —Ç–æ –∏—Ñ —Ç–æ –∫–æ–Ω—Ç–∏–Ω—å–µ
- –∫–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–¥–Ω—É –∑–∞–¥–∞—á—É –∞ –Ω–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–∫ –≤ showStartMenu –≥–¥–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞ –∏ –ø—Ä–æ—á–µ–µ
- —Å–¥–µ–ª–∞—Ç—å –º–∞—Å–∫–∏—Ä–æ–≤–∫—É —Å–ª–æ–≤ * –¥–ª—è –ø—Ä–∏–∫–æ–ª–∞


+ –≤ –º–µ–π–Ω–µ –Ω–µ –Ω—É–∂–µ–Ω —Ü–∏–∫–ª, –æ–Ω –±–µ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π , –Ω–∞–º –ø—Ä–æ—Å—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ—Ç–æ–¥ –∏ –≤—Å–µ

- –æ—Ç–¥–µ–ª—å–Ω–æ —Å–¥–µ–ª–∞—Ç—å –º–µ—Ç–æ–¥ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç

- –∫–∞–∫ —è –ø–æ–Ω–∏–º–∞—é —Å–ø–∏—Å–æ–∫ —Ö—É–µ–≤—ã—Ö –±—É–∫–≤ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ Set —á—Ç–æ–±—ã –±—É–∫–≤—ã –±—ã–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á—Ç–æ–±—ã –Ω–µ –º–Ω–æ–∂–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
 */

//
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.*;

public class Stars {
    //–°–ß–ï–¢–ß–ò–ö–ò
    public static int wins = 0; // —Å—á–µ—Ç—á–∏–∫ –≤—ã–∏–≥—Ä—ã—à–µ–π
    public static int losses = 0; // —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π
    public static int mistakesCount = 0; // —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    public static int wrongLettersCount = 1; //—Å—á–µ—Ç—á–∏–∫ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –±—É–∫–≤
    public static int correctLettersCount = 0;// —Å—á–µ—Ç—á–∏–∫ –æ—Ç–≥–∞–¥–∞–Ω–Ω—ã—Ö –±—É–∫–≤
    public static boolean stop = true;// –µ—Å–ª–∏ false —Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É

    // –ü–æ–ª–µ
    public static final String[] HANGMAN_STAGES = {
            """
            ========================
            |//                    |
            ||                     /\\
            ||                     \\/
            ||                   (√ó_√ó)
            ||                    /||\\
            ||                   / || \\\\
            ||                    //\\\\
            ||                   //  \\\\
            ||======================||
          __||______________________||
             üíÄ GAME OVER üíÄ
            """,
            """
                                             ========================
                                             |//                   |
                                             ||                   /
                                             ||                  /
                                             ||                 /
                                             ||      \\        /
                                             ||               /  ___(√ó_√ó)
                                             ||              /  /   /||\\
                                             ||             /  /  / || \\\\
                                             ||            |  /    //\\\\
                             ________        ||            \\/    //  \\\\
                            |    |==|=|      ||===========================||
                     ____________|==|=|______||___________________________||
                                              üíÄ GAME OVER üíÄ
            """,
            """
            ========================
            |//                    |
            ||                     /\\
            ||                     \\/
            ||                   (√ó_√ó)
            ||                    /||\\
            ||                   / || \\\\
            ||                    //\\\\
            ||                   //  \\\\
            ||======================||
          __||______________________||
             üíÄ GAME OVER üíÄ
            """,
            """
            ========================
            |//                    |
            ||                     /\\
            ||                     \\/
            ||                   (√ó_√ó)
            ||                    /||\\
            ||                   / || \\\\
            ||                    //\\\\
            ||                   //  \\\\
            ||======================||
          __||______________________||
             üíÄ GAME OVER üíÄ
            """,
            """
            ========================
            |//                    |
            ||                     /\\
            ||                     \\/
            ||                   (√ó_√ó)
            ||                    /||\\
            ||                   / || \\\\
            ||                    //\\\\
            ||                   //  \\\\
            ||======================||
          __||______________________||
             üíÄ GAME OVER üíÄ
            """,
            """
            ========================
            |//                    |
            ||                     /\\
            ||                     \\/
            ||                   (√ó_√ó)
            ||                    /||\\
            ||                   / || \\\\
            ||                    //\\\\
            ||                   //  \\\\
            ||======================||
          __||______________________||
             üíÄ GAME OVER üíÄ
            """
    };
    public static Scanner scanner = new Scanner(System.in);
    public static String[][] board = {{"__", "__", "_ "},
            {"| ", "  ", " |"},
            {"| ", "  ", "  "},
            {"| ", "  ", "   "},
            {"| ", " ", "    "},
            {"A ", "  ", "  "},
            {" "},
            {" ", " ", " ", " ", " ", " ", " ", " ", " ", " "},
            {"–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –±—É–∫–≤—ã :", "", "", "", "", "", ""}};
    //–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤
    public static String[] collectionWords = {"–ö—É–∫—É—Ä—É–∑–∞", "–ë–æ–ª–æ—Ç–æ", "–ê–≤—Ç–æ–º–æ–±–∏–ª—å", "–ß–µ–±—É—Ä–µ–∫", "–ñ–∏—Ä–∞—Ñ", "–ë–∞–º–±—É–∫"};

    public static String secretWord = getRandomWord();

    public static String[][] resetBoard = {{"__", "__", "_ "},  // —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–∞—Å—á–∏—Å—Ç–∫–∏ –ø–æ–ª—è –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
            {"| ", "  ", " |"},
            {"| ", "  ", "  "},
            {"| ", "  ", "   "},
            {"| ", " ", "    "},
            {"A ", "  ", "  "},
            {" "},
            {" ", " ", " ", " ", " ", " ", " ", " ", " ", " "},
            {"–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –±—É–∫–≤—ã :", "", "", "", "", "", ""}};

    // —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ –º–µ—Ç–æ–¥—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ç–æ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏—Ö –ø–æ –ª–æ–≥–∏–∫–µ
    public static int scannerInt(){
        while(true){
            String s = scanner.nextLine().trim();
            if(s.matches("\\d+")){
                return Integer.parseInt(s);
            }
            System.out.println("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –±—É–∫–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤!");
        }
    }

    public  static String scannerLine(){
        while (true) {
            String s = scanner.nextLine().trim();
            if(s.matches("[–ê-–Ø–∞-—è–Å—ë]")){
                return s.toLowerCase();
            }
            System.out.println("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –±–µ–∑ —Ü–∏—Ñ—Ä –∏ —Å–∏–º–≤–æ–ª–æ–≤!");
        }
    }

    public static void statistic(){
        if (wins == 0 && losses == 0) { //–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            System.out.println("–¢—ã –µ—â–µ –Ω–µ —Å—ã–≥—Ä–∞–ª, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ—Ç ;)");
        } else {
            System.out.println("–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞!");
            System.out.println("–í—ã–∏–≥—Ä—ã—à–∏: " + wins);
            System.out.println("–ü—Ä–æ–∏–≥—Ä—ã—à–∏: " + losses);
        }
    }

    public static List<String> load(){
        List<String> result = new ArrayList<>();
        try (InputStream is = Stars.class.getResourceAsStream("/words.txt");
             BufferedReader br = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8))) {

            String line;
            while ((line = br.readLine()) != null) {
                String w = line.trim();
                if (!w.isEmpty()) result.add(w);
            }
        } catch (Exception e) {
            System.out.println("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å words.txt –∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤: " + e.getMessage());
        }
        // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–ª–æ–≤ –Ω–µ—Ç ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä, —á—Ç–æ–±—ã –∏–≥—Ä–∞ –Ω–µ —É–ø–∞–ª–∞
        if (result.isEmpty()) {
            result = Arrays.asList("java", "–∫–æ–¥", "–≤–∏—Å–µ–ª–∏—Ü–∞");
        }
        return result;
    }

    public static String rraannddoomm(){
        Random random = new Random();
        List<String> raWord = load();
        int randomWord = random.nextInt(raWord.size());
        return raWord.get(randomWord);
    }



//--------------------------------------------------------------------------
    public static void showStartMenu() {
        //–ú–µ–Ω—é –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
        while(true){
            showMenu();
            int ch = scannerInt();
            if (ch == 1) { // –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ 1 - –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
                startNewGame();
                start();
            }
            else if(ch == 2) {// –µ—Å–ª–∏ 2 - —Å–º–æ—Ç—Ä–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É//
                statistic();
               System.out.println("0 - –í—ã—Ö–æ–¥");
               while(true) {
                   int exit = scannerInt();
                   if (exit == 0) {
                       break;
                   }
                   System.out.println("–í–≤–µ–¥–∏—Ç–µ 0 –¥–ª—è –≤—ã—Ö–æ–¥–∞");
               }
            }
            else if(ch == 3) {
                System.out.println("–í—ã—Ö–æ–¥");
                break;
            }
            else {
                System.out.println("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞");
            }
        }
    }

    public static void showMenu(){
        System.out.println("1 - –ù–æ–≤–∞—è –∏–≥—Ä–∞");
        System.out.println("2 - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");
        System.out.println("3 - –í—ã—Ö–æ–¥");
    }

    public static void start() {

        while(true) {
            showBoard();
            String s = scannerLine();
            chekUp(s);
            if(checkWin()){
                System.out.println("–¢–´ –í–´–ò–ì–†–ê–õ!!!");
                wins++;
                break;
            }
            if(checkLoss()){
                losses++;
                System.out.println("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!");
                break;
            }
        }
    }

    public static boolean checkWin() {// –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä–∞–ª–∏ –º—ã –∏–ª–∏ –Ω–µ—Ç
        int length = secretWord.length();
        int open–°ells = 0;// 4
        for(int i = 0; i < length; i++) {      //2
            if(!"_ ".equals(board[7][i])) {
                open–°ells++;

            }
            if(length == open–°ells){
                showBoard();
            return true;
            }
        }
        return false;
    }

    public static boolean checkLoss() {  //–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –º—ã –∏–ª–∏ –Ω–µ—Ç
        if (mistakesCount == 6) {
            showBoard();
            return true;
        }
        return false;
    }

    public static String getRandomWord() {
        Random random = new Random();
        int randomWord = random.nextInt(collectionWords.length);
        String chooseWord = collectionWords[randomWord];

        // –ø–æ–∫–∞–∑–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –±—É–∫–≤ –≤ —Å–ª–æ–≤–µ
        int lengthWord = chooseWord.length();

        // –≤—Å—Ç–∞–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—É–∫–≤ –≤ –≤–∏–¥–µ "_" –≤ –ø–æ–ª–µ
        for (int i = 0; i < lengthWord; i++) {
            board[7][i] = "_ ";
        }
        return chooseWord;
    } // // –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –¥–µ–ª–∞–µ–º –ø–æ–¥ –Ω–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –≤ –ø–æ–ª–µ

    public static void chekUp(String a) {
        //  —Å—Ä–∞–≤–Ω–∏—Ç—å –±—É–∫–≤—ã
        int i = 0;
        int e = 0;
        String x = a.substring(0, 1);
        while (i < secretWord.length()) {
            String y = secretWord.substring(i, i + 1);
            if (x.equalsIgnoreCase(y)) {
                board[7][i] = y + " ";
                correctLettersCount++;
                e++;
            }
            i++;
        }
        if (e == 0) {
            board[8][wrongLettersCount] = x + " ";
            mistakesCount++;
            board[8][0] = "–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –±—É–∫–≤—ã :(" + mistakesCount + ")";
            incrementMistakes(mistakesCount);
            wrongLettersCount++;
        }
    }  // –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –±—É–∫–≤–∞ –≤ —Å–ª–æ–≤–µ –∏ –≤—ã–≤–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –±—É–∫–≤

    public static void incrementMistakes(int a) {
        switch (a) {
            case 1:
                board[2][2] = " 0";
                break;
            case 2:
                board[3][2] = " |";
                break;
            case 3:
                board[3][2] = "/|";
                break;
            case 4:
                board[3][2] = "/|\\";
                break;
            case 5:
                board[4][2] = " /";
                break;
            case 6:
                board[4][2] = " /Àô\\";
                break;
        }
    } // —Å—á–∏—Ç–∞–µ—Ç –æ—à–∏–±–∫–∏

    public static void showBoard() {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                System.out.print(board[i][j]);
            }
            System.out.println();
        }
    } // –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–µ

    public static void startNewGame() {  //–ø—Ä–∏ –Ω–æ–≤–æ–π –∏–≥—Ä–µ –Ω—É–∂–Ω–æ –æ–±–Ω—É–ª–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ (–∫—Ä–æ–º–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏) –∏ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ –ø–æ–ª–µ
        mistakesCount = 0;
        correctLettersCount = 0;
        wrongLettersCount = 1;
        for (int i = 0; i < board.length; i++) {  //–æ—á–∏—â–∞–µ–º –ø–æ–ª–µ
            for (int j = 0; j < board[i].length; j++) {
                board[i][j] = resetBoard[i][j];
            }
        }
        secretWord = getRandomWord(); //–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ
    }

    public static void main(String[] args) {
        System.out.println(load());
        showStartMenu();
    }

}